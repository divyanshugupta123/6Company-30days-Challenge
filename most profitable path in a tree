class Solution {
       class Node {
        int nd;
        int amount;

        public Node(int nd, int amount) {
            this.amount = amount;
            this.nd = nd;
        }
    }

    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        int m = edges.length;

        Map<Integer, List<Integer>> graph = new HashMap<>();
        Set<Integer> visited = new HashSet<>();
        Set<Integer> opened = new HashSet<>();
        Map<Integer, Integer> parent = new HashMap<>();
        parent.put(0, -1);
        for (int i = 0; i < m; i++) {
            int a = edges[i][0];
            int b = edges[i][1];
            graph.putIfAbsent(a, new ArrayList<>());
            graph.putIfAbsent(b, new ArrayList<>());
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
        updateParent(graph, visited, 0, parent);
        visited.clear();
        Queue<Node> queue = new LinkedList<>();

        queue.add(new Node(0, amount[0]));
        int max = Integer.MIN_VALUE;

        while (!queue.isEmpty()) {
            if (bob != -1) {
                opened.add(bob);
                bob = parent.get(bob);
            }
            int l = queue.size();
            while (l > 0) {
                Node node = queue.poll();
                visited.add(node.nd);
                int val1 = node.amount;
                boolean isLeaf = true;
                for (Integer nd : graph.getOrDefault(node.nd,new ArrayList<>())) {
                    if (!visited.contains(nd)) {
                        isLeaf = false;
                        int val = val1;
                        if (!opened.contains(nd)) {
                            if (bob == nd) {
                                val += amount[nd] / 2;
                            } else {
                                val += amount[nd];
                            }
                        }
                        queue.add(new Node(nd, val));
                    }
                }
                if (isLeaf) {
                    max = Math.max(max, node.amount);
                }
                l--;
            }
        }
        return max;
    }

    private void updateParent(Map<Integer, List<Integer>> graph, Set<Integer> visited,
                           int node, Map<Integer, Integer> parent) {

        if (visited.contains(node)) return;
        visited.add(node);
        for (Integer nd : graph.get(node)) {

            if(!visited.contains(nd)){
                parent.put(nd, node);
                updateParent(graph, visited, nd, parent);
            }

        }
    }

}
